function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% -------------- Setup some useful variables ---------------------------------
m = size(X, 1);
         
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

y_matrix = eye(num_labels)(y,:) ;

% ------------ Feed forward  -------------------

a1 = [ones(m, 1) X];                                % adding a column of bias to X and renaming it a1

z2 = Theta1 * a1';                                  % 

a2 = sigmoid(z2);                                   % Hidden layer created by applying the sigmoid function

a2 = a2';                                           % Transposing the a2 matrix that we created by applying the function

a2 = [ones(size(a2, 1), 1) a2];                     % adding another bias column to improve the shape of the matrix

z3 = a2 * Theta2';                                  

a3 = sigmoid(z3);                                   % Output layer created by sigmoid function

J = (1/m) * (sum(sum(-y_matrix .* log(a3) - (1-y_matrix).* log(1 - a3))));  % Unregularised Cost function

Theta1(:, 1) = 0;                                   % Setting Theta1 and Theta2 first columns to zero as these are not
Theta2(:, 1) = 0;                                   % part of the regularisation process
Theta1_sqr = Theta1 .^ 2;
Theta2_sqr = Theta2 .^ 2;

reg = (lambda / (2 * m)) * (sum(sum(Theta1_sqr)) + sum(sum(Theta2_sqr)));   % Regularisation 

J = J + reg;                                        % Cost function regularised

% ---------------------  Backpropagation  -----------------------------

d3 = a3 - y_matrix;                                 % Difference between original output y matrix and output after feedforward

d2 = (Theta2(:,2:end)' * d3') .* sigmoidGradient(z2);   % Calculating error rate

Delta1(:, 1) = 0;                                   % We don't use the first column of the matrix

Delta1 = d2 * a1;                                   % Measuring error rate (separate function available for acceptable rate).

Delta2(:, 1) = 0;                                   % As Delta1

Delta2 = d3' * a2;                                  % As Delta1

Theta1_grad = (1/m) * Delta1;                       % Theta gradient without regularisation

Theta1_grad = Theta1_grad + (lambda / m) * Theta1;  % Regularised backpropagation with theta gradient

Theta2_grad = (1/m) * Delta2;                       % as above for Theta1

Theta2_grad = Theta2_grad + (lambda / m) * Theta2;  % as above for Theta1


% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
